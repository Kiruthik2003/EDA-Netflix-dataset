# -*- coding: utf-8 -*-
"""EDA Project .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xMAU-4fuYIkLfbAxFiHceBk0kX-Izmql
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
#Load the file
df=pd.read_csv('netflix_titles.csv')

#Print first 5 rows of data
df.head()

#Print last 5 rows of data
df.tail()

#Cleaning the data for missing values,null values etc.
df.isnull().sum()

df["director"].fillna("No name")

df["cast"].fillna("Unknown")

df["country"].fillna("Not mentioned")

#Print info on the dataset
df.info()

#Get some description of the data - only release_year is number(s) value(s)
df['release_year'].describe()

#Columns in the dataset
df.columns

#Shape of the dataframe
df.shape

#How many years of Data(1966-2021)(release_year)
year_count=df[(df['release_year'] >= 1966) & (df['release_year'] <= 2021)]['release_year']
year_count.nunique()

#Movies VS TV Shows (type)
df['type'].value_counts()

#Check for null values in all columns of dataset
df.isnull().sum()

#Replace NaN value(s) with TV-MA
df['rating'].replace(np.NaN,'TV-MA',inplace=True)
df['rating']

#Replace NaN value(s) with United States
df['country'].replace(np.NaN,'United States',inplace=True)
df['country']

#Rename the column "listed_in" to "genre"
df.rename(columns={'listed_in':'genre'},inplace=True)
df.head()

""" **VISUALIZATION**"""

#Calculating mean of release_year and show it using barh plot (Put title: Netflix release year)
mean_releaseyr=df['release_year'].mean()
sns.barplot(x=mean_releaseyr,y=['Average release year'],orient='h',color='#000080')
plt.xlabel('Year')
plt.xlim(df['release_year'].min() , df['release_year'].max() )
plt.title('Netflix Release Year')
plt.show()

#TV SHOWS VS MOVIES on Netflix -Bar chart
df['type'].value_counts().plot(kind='bar',color=['#20B2AA','#8B008B'])
plt.xlabel("Type")
plt.ylabel("Count")
plt.title("TV SHOW VS MOVIE")

#Type of shows percentage on Netflix using piechart:
colours=['Chartreuse','deeppink']
x=df['type'].value_counts().plot(kind='pie',labels=df['type'],colors=colours,autopct='%1.2f%%')
plt.title("Type of Shows")
plt.show()

#Show Netflix Rating Distribution visualised by a COUNT PLOT
df.groupby('rating').rating.count()
sns.countplot(df['rating'],color='#00FFFF')
plt.xlabel("Count")
plt.ylabel('Rating')
plt.title('Netflix Rating Distribution')
plt.show()

#Show the Top 5 countries with Highest Movies/TV Shows,visualised by a PIE CHART
x=df['country'].value_counts().head()
label=['United States','India','United Kingdom','Japan','South Korea']
my_shade=['#FF1493','#FFFF00','#008B8B','#00FA9A','#BA55D3']
plt.pie(x,labels=label,colors=my_shade)
plt.legend(label)
plt.title("Top 5 countries with Highest Movies/TV Shows")
plt.show()

#Show the Top 5 Netflix country distribution separated by type of release(i.e Movies,TV shows),visulizing via Bar Graph
top_5countries=df.groupby(['type','country']).size().reset_index(name='Count')
top_countries=top_5countries.sort_values(by='Count',ascending=False).head(5)
colour=['	#0000CD','#00FFFF']
sns.barplot(top_countries,x='country',hue='type',y='Count',palette="magma")
plt.xlabel("Country")
plt.ylabel("Count")
plt.title("Top 5 Countries: Movies and TV Shows Count")
plt.show()

#Show the top 10 genres of movies and also tv shows
top10_movie=df[df['type']=='Movie']['genre'].value_counts().head(10)
top10_tvshow=df[df['type']=='TV Show']['genre'].value_counts().head(10)

sns.barplot(x=top10_movie.values,y=top10_movie.index,color='#7cfc00')
plt.title('Top 10 Movie Genres on Netflix')
plt.xlabel('Count')
plt.ylabel('Movie genre')
plt.show()

sns.barplot(x=top10_tvshow.values,y=top10_tvshow.index,color='#C71585')
plt.title('Top 10 TV Show Genres on Netflix')
plt.xlabel('Count')
plt.ylabel('TV Show genre')
plt.show()

#When is the best to time to release a Movie/TV shows? Show it using heatmap
df['new_date'] = pd.to_datetime(df['date_added'], format='%B %d, %Y', errors='coerce')

df['month'] = df['new_date'].dt.month
df['month'].drop_duplicates()
df['year'] = df['new_date'].dt.year
table=df.pivot_table(index='month',columns='year',values='type', aggfunc='size',fill_value=0)
plt.figure(figsize=(12, 6))
sns.heatmap(table,cmap='cool',linewidths=2,annot=True,fmt='d')
plt.show()